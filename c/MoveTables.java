package c;

/* Basically, I don't want to litter Cube.java with these static Permutation objects for moves and rotations */
public class MoveTables {

    private static Permutation[] moves;
    private static Permutation[] rotations;
    
    static {
        moves = new Permutation[]{
                new Permutation(new byte[]{14, 12, 13, 3, 4, 5, 20, 18, 19, 9, 10, 11, 7, 8, 6, 15, 16, 17, 1, 2, 0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 40, 41, 46, 47, 36, 37, 38, 39, 34, 35, 42, 43, 44, 45, 32, 33}),
                new Permutation(new byte[]{6, 7, 8, 3, 4, 5, 0, 1, 2, 9, 10, 11, 18, 19, 20, 15, 16, 17, 12, 13, 14, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 32, 33, 36, 37, 38, 39, 46, 47, 42, 43, 44, 45, 40, 41}),
                new Permutation(new byte[]{20, 18, 19, 3, 4, 5, 14, 12, 13, 9, 10, 11, 1, 2, 0, 15, 16, 17, 7, 8, 6, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 46, 47, 40, 41, 36, 37, 38, 39, 32, 33, 42, 43, 44, 45, 34, 35}),
                new Permutation(new byte[]{15, 16, 17, 12, 13, 14, 6, 7, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 18, 19, 20, 21, 22, 23, 43, 42, 26, 27, 28, 29, 41, 40, 32, 33, 34, 35, 36, 37, 38, 39, 25, 24, 31, 30, 44, 45, 46, 47}),
                new Permutation(new byte[]{3, 4, 5, 0, 1, 2, 6, 7, 8, 9, 10, 11, 15, 16, 17, 12, 13, 14, 18, 19, 20, 21, 22, 23, 30, 31, 26, 27, 28, 29, 24, 25, 32, 33, 34, 35, 36, 37, 38, 39, 42, 43, 40, 41, 44, 45, 46, 47}),
                new Permutation(new byte[]{12, 13, 14, 15, 16, 17, 6, 7, 8, 9, 10, 11, 3, 4, 5, 0, 1, 2, 18, 19, 20, 21, 22, 23, 41, 40, 26, 27, 28, 29, 43, 42, 32, 33, 34, 35, 36, 37, 38, 39, 31, 30, 25, 24, 44, 45, 46, 47}),
                new Permutation(new byte[]{19, 20, 18, 3, 4, 5, 6, 7, 8, 16, 17, 15, 12, 13, 14, 2, 0, 1, 11, 9, 10, 21, 22, 23, 32, 33, 38, 39, 28, 29, 30, 31, 26, 27, 34, 35, 36, 37, 24, 25, 40, 41, 42, 43, 44, 45, 46, 47}),
                new Permutation(new byte[]{9, 10, 11, 3, 4, 5, 6, 7, 8, 0, 1, 2, 12, 13, 14, 18, 19, 20, 15, 16, 17, 21, 22, 23, 26, 27, 24, 25, 28, 29, 30, 31, 38, 39, 34, 35, 36, 37, 32, 33, 40, 41, 42, 43, 44, 45, 46, 47}),
                new Permutation(new byte[]{16, 17, 15, 3, 4, 5, 6, 7, 8, 19, 20, 18, 12, 13, 14, 11, 9, 10, 2, 0, 1, 21, 22, 23, 38, 39, 32, 33, 28, 29, 30, 31, 24, 25, 34, 35, 36, 37, 26, 27, 40, 41, 42, 43, 44, 45, 46, 47}),
                new Permutation(new byte[]{0, 1, 2, 17, 15, 16, 6, 7, 8, 23, 21, 22, 12, 13, 14, 10, 11, 9, 18, 19, 20, 4, 5, 3, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 42, 43, 44, 45, 40, 41, 38, 39, 36, 37, 46, 47}),
                new Permutation(new byte[]{0, 1, 2, 9, 10, 11, 6, 7, 8, 3, 4, 5, 12, 13, 14, 21, 22, 23, 18, 19, 20, 15, 16, 17, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 36, 37, 40, 41, 44, 45, 42, 43, 46, 47}),
                new Permutation(new byte[]{0, 1, 2, 23, 21, 22, 6, 7, 8, 17, 15, 16, 12, 13, 14, 4, 5, 3, 18, 19, 20, 10, 11, 9, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 44, 45, 42, 43, 40, 41, 36, 37, 38, 39, 46, 47}),
                new Permutation(new byte[]{0, 1, 2, 3, 4, 5, 21, 22, 23, 18, 19, 20, 12, 13, 14, 15, 16, 17, 6, 7, 8, 9, 10, 11, 24, 25, 47, 46, 45, 44, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 27, 26, 29, 28}),
                new Permutation(new byte[]{0, 1, 2, 3, 4, 5, 9, 10, 11, 6, 7, 8, 12, 13, 14, 15, 16, 17, 21, 22, 23, 18, 19, 20, 24, 25, 28, 29, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 44, 45}),
                new Permutation(new byte[]{0, 1, 2, 3, 4, 5, 18, 19, 20, 21, 22, 23, 12, 13, 14, 15, 16, 17, 9, 10, 11, 6, 7, 8, 24, 25, 45, 44, 47, 46, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 29, 28, 27, 26}),
                new Permutation(new byte[]{0, 1, 2, 22, 23, 21, 13, 14, 12, 9, 10, 11, 5, 3, 4, 15, 16, 17, 18, 19, 20, 8, 6, 7, 24, 25, 26, 27, 34, 35, 36, 37, 32, 33, 30, 31, 28, 29, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47}),
                new Permutation(new byte[]{0, 1, 2, 6, 7, 8, 3, 4, 5, 9, 10, 11, 21, 22, 23, 15, 16, 17, 18, 19, 20, 12, 13, 14, 24, 25, 26, 27, 30, 31, 28, 29, 32, 33, 36, 37, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47})
        };
        rotations = new Permutation[] {
                
        };
    }
    public static Permutation getMove(int move) {
        return MoveTables.moves[move];
    }
}
